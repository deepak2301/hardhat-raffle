{
  "address": "0x02642C5410cA27500c31cB8aBadDb957CCD38738",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfrimations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40f6615023c96d86bdc48501935d4aff8ffcef13b1d83ca5bf9781c37dda562f",
  "receipt": {
    "to": null,
    "from": "0xb77e5361c69c7CeD10C24E333Bc443eF4716CbD4",
    "contractAddress": "0x02642C5410cA27500c31cB8aBadDb957CCD38738",
    "transactionIndex": 1,
    "gasUsed": "1209116",
    "logsBloom": "0x
    "blockHash": "0xb5227429feb13962620ed888937ec9876ed846cfd23bd0c4b0efa9f2ad9a5dce",
    "transactionHash": "0x40f6615023c96d86bdc48501935d4aff8ffcef13b1d83ca5bf9781c37dda562f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32743843,
        "transactionHash": "0x40f6615023c96d86bdc48501935d4aff8ffcef13b1d83ca5bf9781c37dda562f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b77e5361c69c7ced10c24e333bc443ef4716cbd4",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000067186e282240000000000000000000000000000000000000000000000000002a77be3f523b153000000000000000000000000000000000000000000000e2787228bbdaffb17d500000000000000000000000000000000000000000000000002a10a5d12a18d53000000000000000000000000000000000000000000000e278728fd44927d3bd5",
        "logIndex": 4,
        "blockHash": "0xb5227429feb13962620ed888937ec9876ed846cfd23bd0c4b0efa9f2ad9a5dce"
      }
    ],
    "blockNumber": 32743843,
    "cumulativeGasUsed": "1573548",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "100000000000000000",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "3512",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "4f43a7691d559412bab0daf0f5570483",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfrimations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Deepak Mishra\",\"details\":\"This implements ChainLink VRF2 and Chainlink keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the chainlink Keeper nodes call they look for the `upKeepNeeded` to return true The following should be true in order to return true 1.Our Time interval should have passed 2.The lottery should have atleast 1 player, and have some ETH 3.Our subscription is funded with link 4.The Lottery Should be in an \\\"Open\\\" state\"}},\"title\":\"Basic Raffle Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"Raffle__NotEnoughEth()\":[{\"notice\":\"TODO in raffle.sol Enter the lottery(By paying some amount) pick a andom winner (verifyably random) winner to be selected every (1h,4h,1dayetc)-> compeletly automatic To get this random users and to make it automatic we will use chainlink orcle for randomness,automated execution using (chainlink keeper)\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"This contrat is for creating an untamperable decetralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.7;\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n/**TODO in raffle.sol\\n * Enter the lottery(By paying some amount)\\n * pick a andom winner (verifyably random)\\n * winner to be selected every (1h,4h,1dayetc)-> compeletly automatic\\n * To get this random users and to make it automatic we will use\\n * chainlink orcle for randomness,automated execution using (chainlink keeper)\\n */\\nerror Raffle__NotEnoughEth();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n   uint256 currentBalance,\\n   uint256 numPlayers,\\n   uint256 raffleState\\n);\\n\\n/**\\n * @title Basic Raffle Contract\\n * @author Deepak Mishra\\n * @notice This contrat is for creating an untamperable decetralized smart contract\\n * @dev This implements ChainLink VRF2 and Chainlink keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, AutomationCompatibleInterface {\\n   /* Type Declarations */\\n   enum RaffleState {\\n      OPEN,\\n      CALCULATING\\n   }\\n\\n   /*State variables */\\n   uint256 private immutable i_entryFees;\\n   address payable[] private s_players;\\n   VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n   bytes32 private immutable i_gasLane;\\n   uint64 private immutable i_subscriptionId;\\n   uint16 private constant REQUEST_CONFIRMSTIONS = 3;\\n   uint32 private immutable i_callbackGasLimit;\\n   uint32 private constant NUM_WORDS = 1;\\n\\n   /* Lottery variables */\\n   address private s_recentWinners;\\n   RaffleState private s_raffleState;\\n   uint256 private s_lastTimeStamp;\\n   uint256 immutable i_interval;\\n\\n   /* Events  */\\n   event RaffleEnter(address indexed player);\\n   event RequestedRaffleWinner(uint256 indexed requestId);\\n   event WinnerPicked(address indexed winner);\\n\\n   constructor(\\n      address vrfCoordinatorV2,\\n      uint256 entryFee,\\n      bytes32 gasLane,\\n      uint64 subscriptionId,\\n      uint32 callbackGasLimit,\\n      uint256 interval\\n   ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n      i_entryFees = entryFee;\\n      i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n      i_gasLane = gasLane;\\n      i_subscriptionId = subscriptionId;\\n      i_callbackGasLimit = callbackGasLimit;\\n      s_raffleState = RaffleState.OPEN;\\n      s_lastTimeStamp = block.timestamp;\\n      i_interval = interval;\\n   }\\n\\n   /* Finctions */\\n\\n   function enterRaffle() public payable {\\n      //we will not use require (msg.value>i_entryfees,\\\"not enough eth\\\")\\n      //we will use below line to reduce gas fees\\n      if (msg.value < i_entryFees) {\\n         revert Raffle__NotEnoughEth();\\n      }\\n      if (s_raffleState != RaffleState.OPEN) {\\n         revert Raffle__NotOpen();\\n      }\\n\\n      s_players.push(payable(msg.sender));\\n      // events\\n      //Emit an event when we update a dynamic arry or mapping\\n      // best event practice is to => name events with function name reversed\\n      emit RaffleEnter(msg.sender);\\n   }\\n\\n   /**\\n    * @dev This is the function that the chainlink Keeper nodes call\\n    * they look for the `upKeepNeeded` to return true\\n    * The following should be true in order to return true\\n    * 1.Our Time interval should have passed\\n    * 2.The lottery should have atleast 1 player, and have some ETH\\n    * 3.Our subscription is funded with link\\n    * 4.The Lottery Should be in an \\\"Open\\\" state\\n    */\\n   function checkUpkeep(\\n      bytes memory /*checkData*/\\n   )\\n      public\\n      override\\n      returns (bool upkeepNeeded, bytes memory /*performdata */)\\n   {\\n      bool isOpen = (RaffleState.OPEN == s_raffleState);\\n      bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n      bool hasPlayers = (s_players.length > 0);\\n      bool hasBalance = address(this).balance > 0;\\n      upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n      //(block.timestamp - last block timestamp) > interval\\n   }\\n\\n   function performUpkeep(bytes calldata /*performData */) external override {\\n      //To Pick Random no we need to request the random number\\n      //once we get it, do something with it\\n      //chainlink vrf os a 2 transaction process\\n      (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n      if (!upkeepNeeded) {\\n         revert Raffle__UpkeepNotNeeded(\\n            address(this).balance,\\n            s_players.length,\\n            uint256(s_raffleState)\\n         );\\n      }\\n\\n      s_raffleState = RaffleState.CALCULATING;\\n      uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n         i_gasLane, //or we can call it keyhash\\n         i_subscriptionId,\\n         REQUEST_CONFIRMSTIONS,\\n         i_callbackGasLimit,\\n         NUM_WORDS\\n      );\\n      emit RequestedRaffleWinner(requestId);\\n   }\\n\\n   function fulfillRandomWords(\\n      uint256 /*requestId*/,\\n      uint256[] memory randomWords\\n   ) internal override {\\n      //s_players size is 10\\n      // randomNumber is 200 so how we will get random winnner from players array\\n      uint256 indexOfWinner = randomWords[0] % s_players.length;\\n      address payable recentWinner = s_players[indexOfWinner];\\n      s_recentWinners = recentWinner;\\n      s_raffleState = RaffleState.OPEN;\\n      s_players = new address payable[](0);\\n      s_lastTimeStamp = block.timestamp;\\n      (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n      if (!success) {\\n         revert Raffle__TransferFailed();\\n      }\\n      emit WinnerPicked(recentWinner);\\n   }\\n\\n   /*View /Pure functions */\\n\\n   // function to check entryfees\\n   function getEntryFee() public view returns (uint256) {\\n      return i_entryFees;\\n   }\\n\\n   function getPlayer(uint256 index) public view returns (address) {\\n      return s_players[index];\\n   }\\n\\n   function getRecentWinner() public view returns (address) {\\n      return s_recentWinners;\\n   }\\n\\n   function getRaffleState() public view returns (RaffleState) {\\n      return s_raffleState;\\n   }\\n\\n   function getNumWords() public pure returns (uint256) {\\n      return NUM_WORDS;\\n   }\\n\\n   function getNumberOfPlayers() public view returns (uint256) {\\n      return s_players.length;\\n   }\\n\\n   function getLatestTimeStamp() public view returns (uint256) {\\n      return s_lastTimeStamp;\\n   }\\n\\n   function getRequestConfrimations() public pure returns (uint256) {\\n      return REQUEST_CONFIRMSTIONS;\\n   }\\n\\n   function getInterval() public view returns (uint256) {\\n      return i_interval;\\n   }\\n}\\n\",\"keccak256\":\"0xb733734749c069dbbc4ef52b82477c277101eee9bd1308413ebad2dd144a0548\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001832380380620018328339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c6101405161144b620003e7600039600081816107c1015261082f0152600061067d0152600061065a01526000610639015260006105fd0152600081816103cf01526108ab01526000818161030f0152610363015261144b6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f578063a45c3fae11610059578063a45c3fae14610238578063e55ae4e814610263578063e586a4f0146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780636e04ff0d146101cf57806391ad27b41461020d576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b578063320229eb146101255780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c2a565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610de8565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061013a61053c565b6040516101479190610e53565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190610ec9565b610546565b005b34801561018557600080fd5b5061018e610745565b60405161019b9190610f57565b60405180910390f35b3480156101b057600080fd5b506101b961076f565b6040516101c69190610e53565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f19190611027565b61077e565b604051610204929190611113565b60405180910390f35b34801561021957600080fd5b5061022261082b565b60405161022f9190610e53565b60405180910390f35b34801561024457600080fd5b5061024d610853565b60405161025a9190610e53565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190611143565b610860565b6040516102979190610f57565b60405180910390f35b3480156102ac57600080fd5b506102b56108a7565b6040516102c29190610e53565b60405180910390f35b3480156102d757600080fd5b506102e06108cf565b6040516102ed9190610e53565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b6929190611170565b60405180910390fd5b6103c982826108db565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517fa10e43c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610bb3565b5b600160149054906101000a900460ff16600181111561045d5761045c610bb3565b5b14610494576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105606040518060200160405280600081525061077e565b509050806105cf5747600080549050600160149054906101000a900460ff16600181111561059157610590610bb3565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105c693929190611199565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105f4576105f3610bb3565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106be959493929190611248565b602060405180830381600087803b1580156106d857600080fd5b505af11580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071091906112b0565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107a6576107a5610bb3565b5b600060018111156107ba576107b9610bb3565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107ee919061130c565b1190506000806000805490501190506000804711905083801561080e5750825b80156108175750815b80156108205750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b600080828154811061087557610874611340565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60008080549050826000815181106108f6576108f5611340565b5b6020026020010151610908919061139e565b9050600080828154811061091f5761091e611340565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109b3576109b2610bb3565b5b0217905550600067ffffffffffffffff8111156109d3576109d2610ca5565b5b604051908082528060200260200182016040528015610a015781602001602082028036833780820191505090505b5060009080519060200190610a17929190610b0c565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4590611400565b60006040518083038185875af1925050503d8060008114610a82576040519150601f19603f3d011682016040523d82523d6000602084013e610a87565b606091505b5050905080610ac2576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b85579160200282015b82811115610b845782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2c565b5b509050610b929190610b96565b5090565b5b80821115610baf576000816000905550600101610b97565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bf357610bf2610bb3565b5b50565b6000819050610c0482610be2565b919050565b6000610c1482610bf6565b9050919050565b610c2481610c09565b82525050565b6000602082019050610c3f6000830184610c1b565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c6c81610c59565b8114610c7757600080fd5b50565b600081359050610c8981610c63565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cdd82610c94565b810181811067ffffffffffffffff82111715610cfc57610cfb610ca5565b5b80604052505050565b6000610d0f610c45565b9050610d1b8282610cd4565b919050565b600067ffffffffffffffff821115610d3b57610d3a610ca5565b5b602082029050602081019050919050565b600080fd5b6000610d64610d5f84610d20565b610d05565b90508083825260208201905060208402830185811115610d8757610d86610d4c565b5b835b81811015610db05780610d9c8882610c7a565b845260208401935050602081019050610d89565b5050509392505050565b600082601f830112610dcf57610dce610c8f565b5b8135610ddf848260208601610d51565b91505092915050565b60008060408385031215610dff57610dfe610c4f565b5b6000610e0d85828601610c7a565b925050602083013567ffffffffffffffff811115610e2e57610e2d610c54565b5b610e3a85828601610dba565b9150509250929050565b610e4d81610c59565b82525050565b6000602082019050610e686000830184610e44565b92915050565b600080fd5b60008083601f840112610e8957610e88610c8f565b5b8235905067ffffffffffffffff811115610ea657610ea5610e6e565b5b602083019150836001820283011115610ec257610ec1610d4c565b5b9250929050565b60008060208385031215610ee057610edf610c4f565b5b600083013567ffffffffffffffff811115610efe57610efd610c54565b5b610f0a85828601610e73565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4182610f16565b9050919050565b610f5181610f36565b82525050565b6000602082019050610f6c6000830184610f48565b92915050565b600080fd5b600067ffffffffffffffff821115610f9257610f91610ca5565b5b610f9b82610c94565b9050602081019050919050565b82818337600083830152505050565b6000610fca610fc584610f77565b610d05565b905082815260208101848484011115610fe657610fe5610f72565b5b610ff1848285610fa8565b509392505050565b600082601f83011261100e5761100d610c8f565b5b813561101e848260208601610fb7565b91505092915050565b60006020828403121561103d5761103c610c4f565b5b600082013567ffffffffffffffff81111561105b5761105a610c54565b5b61106784828501610ff9565b91505092915050565b60008115159050919050565b61108581611070565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110c55780820151818401526020810190506110aa565b838111156110d4576000848401525b50505050565b60006110e58261108b565b6110ef8185611096565b93506110ff8185602086016110a7565b61110881610c94565b840191505092915050565b6000604082019050611128600083018561107c565b818103602083015261113a81846110da565b90509392505050565b60006020828403121561115957611158610c4f565b5b600061116784828501610c7a565b91505092915050565b60006040820190506111856000830185610f48565b6111926020830184610f48565b9392505050565b60006060820190506111ae6000830186610e44565b6111bb6020830185610e44565b6111c86040830184610e44565b949350505050565b6000819050919050565b6111e3816111d0565b82525050565b600067ffffffffffffffff82169050919050565b611206816111e9565b82525050565b600061ffff82169050919050565b6112238161120c565b82525050565b600063ffffffff82169050919050565b61124281611229565b82525050565b600060a08201905061125d60008301886111da565b61126a60208301876111fd565b611277604083018661121a565b6112846060830185611239565b6112916080830184611239565b9695505050505050565b6000815190506112aa81610c63565b92915050565b6000602082840312156112c6576112c5610c4f565b5b60006112d48482850161129b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131782610c59565b915061132283610c59565b925082821015611335576113346112dd565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113a982610c59565b91506113b483610c59565b9250826113c4576113c361136f565b5b828206905092915050565b600081905092915050565b50565b60006113ea6000836113cf565b91506113f5826113da565b600082019050919050565b600061140b826113dd565b915081905091905056fea26469706673582212204497d47aee431ef2b7a18d1c7e77f971f755a2a412ae83b72063db63839f65fb64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f578063a45c3fae11610059578063a45c3fae14610238578063e55ae4e814610263578063e586a4f0146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780636e04ff0d146101cf57806391ad27b41461020d576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b578063320229eb146101255780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c2a565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610de8565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061013a61053c565b6040516101479190610e53565b60405180910390f35b34801561015c57600080fd5b5061017760048036038101906101729190610ec9565b610546565b005b34801561018557600080fd5b5061018e610745565b60405161019b9190610f57565b60405180910390f35b3480156101b057600080fd5b506101b961076f565b6040516101c69190610e53565b60405180910390f35b3480156101db57600080fd5b506101f660048036038101906101f19190611027565b61077e565b604051610204929190611113565b60405180910390f35b34801561021957600080fd5b5061022261082b565b60405161022f9190610e53565b60405180910390f35b34801561024457600080fd5b5061024d610853565b60405161025a9190610e53565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190611143565b610860565b6040516102979190610f57565b60405180910390f35b3480156102ac57600080fd5b506102b56108a7565b6040516102c29190610e53565b60405180910390f35b3480156102d757600080fd5b506102e06108cf565b6040516102ed9190610e53565b60405180910390f35b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b6929190611170565b60405180910390fd5b6103c982826108db565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517fa10e43c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610bb3565b5b600160149054906101000a900460ff16600181111561045d5761045c610bb3565b5b14610494576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105606040518060200160405280600081525061077e565b509050806105cf5747600080549050600160149054906101000a900460ff16600181111561059157610590610bb3565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105c693929190611199565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105f4576105f3610bb3565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106be959493929190611248565b602060405180830381600087803b1580156106d857600080fd5b505af11580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071091906112b0565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107a6576107a5610bb3565b5b600060018111156107ba576107b9610bb3565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107ee919061130c565b1190506000806000805490501190506000804711905083801561080e5750825b80156108175750815b80156108205750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b600080828154811061087557610874611340565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60008080549050826000815181106108f6576108f5611340565b5b6020026020010151610908919061139e565b9050600080828154811061091f5761091e611340565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109b3576109b2610bb3565b5b0217905550600067ffffffffffffffff8111156109d3576109d2610ca5565b5b604051908082528060200260200182016040528015610a015781602001602082028036833780820191505090505b5060009080519060200190610a17929190610b0c565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4590611400565b60006040518083038185875af1925050503d8060008114610a82576040519150601f19603f3d011682016040523d82523d6000602084013e610a87565b606091505b5050905080610ac2576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b85579160200282015b82811115610b845782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2c565b5b509050610b929190610b96565b5090565b5b80821115610baf576000816000905550600101610b97565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bf357610bf2610bb3565b5b50565b6000819050610c0482610be2565b919050565b6000610c1482610bf6565b9050919050565b610c2481610c09565b82525050565b6000602082019050610c3f6000830184610c1b565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c6c81610c59565b8114610c7757600080fd5b50565b600081359050610c8981610c63565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cdd82610c94565b810181811067ffffffffffffffff82111715610cfc57610cfb610ca5565b5b80604052505050565b6000610d0f610c45565b9050610d1b8282610cd4565b919050565b600067ffffffffffffffff821115610d3b57610d3a610ca5565b5b602082029050602081019050919050565b600080fd5b6000610d64610d5f84610d20565b610d05565b90508083825260208201905060208402830185811115610d8757610d86610d4c565b5b835b81811015610db05780610d9c8882610c7a565b845260208401935050602081019050610d89565b5050509392505050565b600082601f830112610dcf57610dce610c8f565b5b8135610ddf848260208601610d51565b91505092915050565b60008060408385031215610dff57610dfe610c4f565b5b6000610e0d85828601610c7a565b925050602083013567ffffffffffffffff811115610e2e57610e2d610c54565b5b610e3a85828601610dba565b9150509250929050565b610e4d81610c59565b82525050565b6000602082019050610e686000830184610e44565b92915050565b600080fd5b60008083601f840112610e8957610e88610c8f565b5b8235905067ffffffffffffffff811115610ea657610ea5610e6e565b5b602083019150836001820283011115610ec257610ec1610d4c565b5b9250929050565b60008060208385031215610ee057610edf610c4f565b5b600083013567ffffffffffffffff811115610efe57610efd610c54565b5b610f0a85828601610e73565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f4182610f16565b9050919050565b610f5181610f36565b82525050565b6000602082019050610f6c6000830184610f48565b92915050565b600080fd5b600067ffffffffffffffff821115610f9257610f91610ca5565b5b610f9b82610c94565b9050602081019050919050565b82818337600083830152505050565b6000610fca610fc584610f77565b610d05565b905082815260208101848484011115610fe657610fe5610f72565b5b610ff1848285610fa8565b509392505050565b600082601f83011261100e5761100d610c8f565b5b813561101e848260208601610fb7565b91505092915050565b60006020828403121561103d5761103c610c4f565b5b600082013567ffffffffffffffff81111561105b5761105a610c54565b5b61106784828501610ff9565b91505092915050565b60008115159050919050565b61108581611070565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110c55780820151818401526020810190506110aa565b838111156110d4576000848401525b50505050565b60006110e58261108b565b6110ef8185611096565b93506110ff8185602086016110a7565b61110881610c94565b840191505092915050565b6000604082019050611128600083018561107c565b818103602083015261113a81846110da565b90509392505050565b60006020828403121561115957611158610c4f565b5b600061116784828501610c7a565b91505092915050565b60006040820190506111856000830185610f48565b6111926020830184610f48565b9392505050565b60006060820190506111ae6000830186610e44565b6111bb6020830185610e44565b6111c86040830184610e44565b949350505050565b6000819050919050565b6111e3816111d0565b82525050565b600067ffffffffffffffff82169050919050565b611206816111e9565b82525050565b600061ffff82169050919050565b6112238161120c565b82525050565b600063ffffffff82169050919050565b61124281611229565b82525050565b600060a08201905061125d60008301886111da565b61126a60208301876111fd565b611277604083018661121a565b6112846060830185611239565b6112916080830184611239565b9695505050505050565b6000815190506112aa81610c63565b92915050565b6000602082840312156112c6576112c5610c4f565b5b60006112d48482850161129b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061131782610c59565b915061132283610c59565b925082821015611335576113346112dd565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113a982610c59565b91506113b483610c59565b9250826113c4576113c361136f565b5b828206905092915050565b600081905092915050565b50565b60006113ea6000836113cf565b91506113f5826113da565b600082019050919050565b600061140b826113dd565b915081905091905056fea26469706673582212204497d47aee431ef2b7a18d1c7e77f971f755a2a412ae83b72063db63839f65fb64736f6c63430008080033",
  "devdoc": {
    "author": "Deepak Mishra",
    "details": "This implements ChainLink VRF2 and Chainlink keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the chainlink Keeper nodes call they look for the `upKeepNeeded` to return true The following should be true in order to return true 1.Our Time interval should have passed 2.The lottery should have atleast 1 player, and have some ETH 3.Our subscription is funded with link 4.The Lottery Should be in an \"Open\" state"
      }
    },
    "title": "Basic Raffle Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "Raffle__NotEnoughEth()": [
        {
          "notice": "TODO in raffle.sol Enter the lottery(By paying some amount) pick a andom winner (verifyably random) winner to be selected every (1h,4h,1dayetc)-> compeletly automatic To get this random users and to make it automatic we will use chainlink orcle for randomness,automated execution using (chainlink keeper)"
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "notice": "This contrat is for creating an untamperable decetralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 205,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 222,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinners",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 225,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)200"
      },
      {
        "astId": 227,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)200": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}